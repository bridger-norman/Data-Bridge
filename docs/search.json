[
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Data Bridge",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nSep 25, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 22, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/posts/post-with-code/index.html",
    "href": "blog/posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "blog/posts/welcome/index.html",
    "href": "blog/posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Data Bridge - A Blog about Bridger and Data",
    "section": "",
    "text": "JSON Manipulation in Polars\n\n\n\n\n\n\nPython\n\n\nPolars\n\n\nJSON\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nBridger Norman\n\n\n\n\n\n\n\n\n\n\n\n\nR Package Development\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\nOct 9, 2024\n\n\nBridger Norman\n\n\n\n\n\n\n\n\n\n\n\n\nDeterminism and Data Science\n\n\n\n\n\n\nPhilosophy\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nBridger Norman\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Determinism/index.html",
    "href": "posts/Determinism/index.html",
    "title": "Determinism and Data Science",
    "section": "",
    "text": "Introduction\nIs there a higher truth that all data follows? If so can data science discover it? Can we trust predictions?\nI being not only a student of data science, but also of life have often wondered if my choices actually matter. Is my life laid out before me as a series of reactions that I have mistaken as my choices, or can I change the outcome of my life and others with my free will. Studying data at university has allowed me lots of time to think about how we make choices and how we as scientist might predict those decisions. This short blog is a collection of my thoughts on this topic.\n\n\nDefining The Topic:\nDeterminism: The philosophical idea that all events are predetermined by prior causes, leaving no room for randomness or free will.\nData Science: Wrangling information into meaningful knowledge to solve problems using statistical models, scientific methods, and lots of computing power.\nPredictive Analytics: The practice of using historical data to predict future outcomes, often employing machine learning.\nDisclaimer, I do not subscribe to determinism as I find the idea a way for people to deflect their poor choices on nature. Though I am ignorant, I am not blind enough to miss the patterns that we can observe in nature that persuade our choices. “Persuades” is my stance on the past guiding the future. We have the ability to choose beyond what we were. Though harder to go against what is predicted for us I believe our free will can make us anomalies.\n\n\nLinear Regression\n\n\nMachine Learning and Artificial Intelligence\nAlgorithms: Machine learning models, like regression or decision trees, follow specific rules during training. Automation Workflows: Once a model is deployed, it processes inputs and produces outputs in a repeatable manner."
  },
  {
    "objectID": "posts/R Package Development/index.html",
    "href": "posts/R Package Development/index.html",
    "title": "R Package Development",
    "section": "",
    "text": "This is a post with executable code.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/Polars and JSON/index.html",
    "href": "posts/Polars and JSON/index.html",
    "title": "JSON Manipulation in Polars",
    "section": "",
    "text": "The other day I was tasked with manipulating a JSON formatted data column in a csv. I need to access some information that was deeply embedding into the daunting JSON format. I turned to my favorite python wrangling tool polars and began learning. I have recorded what I learned here for future reference and to help those you may be tasked with a similar issue.\ndecode the json column with str.json_decode() this converts the text to a struct which in polars is practically json \nnext if the list has {} around it use .unnest() to make the first layer of the json the columns note: the data type will look something like this struct[22] \nnext if the list has [] around it use .explode() to remove the items out of the list. note: the data type will look something like this list[struct[11]]\nuse the polars .select() function in between the .unnest() functions so that the data knows how to get wider. This works exactly like a SQL select"
  }
]